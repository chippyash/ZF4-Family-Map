<?php

/**
 * Reporting subsystem
 *
 * @category	Family_Map
 * @package 	Controller
 * @subpackage  Report
 * @author 	Ashley Kitson
 * @copyright   ZF4 Business Limited and Woodnewton - a learning community, 2011, UK
 * @license     GNU AFFERO GENERAL PUBLIC LICENSE V3
 * 
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU Affero General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU Affero General Public License for more details.
 *
 *    You should have received a copy of the GNU Affero General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 *    License text is located in /docs/LICENSE.FAMILYMAP.txt
 */

/**
 * Reports controller
 *
 * <p>All reports can be generated in either html or CSV format</p>
 * <p>CSV reports are generated by suffixing the url with /fmt/csv.
 * e.g. /report/rewardstats/fmt/csv</p>
 * <p>CSV reports are stored in /httpdocs/upload/reports directory on the server</p>
 * <p>Some reports have other configuration options passed on the url.  Please see individual report comments for details</p>
 * <p>report specific CSS should be put into /httpdocs/css/report.css</p>
 *
 * @category	Family_Map
 * @package 	Controller
 * @subpackage  Report
 * @see Application_Model_Report::setRptPeriod()
 */
class ReportController extends Application_Model_Controller {
    /**
     * Session key to save query into
     */
    const SESS_REPORT = 'SavedReport';


	/**
	 * temp storage for query select object
	 *
	 * @var Zend_Db_Select
	 */
	private $_selectStore;	
	/**
	 * temp storage for query select object
	 *
	 * @var Zend_Db_Select
	 */
	private $_selectStore2;
	/**
	 * temp storage for human readable selection criteria
	 *
	 * @var string
	 */
	private $_criteria;
	/**
	 * Are we running a saved report defnition?
	 *
	 * @var boolean
	 */
	private $_runSaved = false;
	
	/**
	 * Report titles
	 *
	 * @var array
	 */
	private $_titles = array('mbr'=>'Membership Report','ovl'=>'Members within Overlays Report','usg'=>'Service Usage Report','att'=>'Service Attendance Register','enr'=>'Service Attendance Statistics','card'=>'Member Card Details');
		
	/**
	 * 1/ Set up json context
	 * 2/ Set up word context
	 * 3/ set up csv (excel) context
	 */
	public function init() {
		$cxt = $this->_helper->getHelper('contextSwitch');
		$cxt->addContext(
			'excel',
			array(
				'suffix' => 'csv',
				'headers' => array(
						'Content-Type' => 'application/text',
						'Keep-Alive' => 'timeout=15, max=100',
						'Cache-Control' => 'public, must-revalidate, max-age=0'
						)
			)
		);
		$cxt->addContext(
			'word',
			array(
				'suffix' => 'word',
				'headers' => array(
						'Content-Type' => 'application/msword',
						'Keep-Alive' => 'timeout=15, max=100',
						'Cache-Control' => 'public, must-revalidate, max-age=0'
						)
			)
		);
		$cxt->addActionContext('run', array('xml','excel','word'))
			->addActionContext('save', 'json')
			->addActionContext('sel', 'json')
			->addActionContext('runsaved', array('xml','excel','word'))
			->initContext();
		if ($cxt->getCurrentContext() == 'word') {
			$this->view->showLogo = true;
			$this->view->logoUrl = 'http://fmlymap.zf4.biz/images/';
		} else {
			$this->view->showLogo = false;
			$this->view->logoUrl = '/images/';
		}
	}

/**
 * MAIN REPORT FUNCTIONALITY
 */
	/**
	 * Control panel for reports
	 * Allow selection of reports and entry of data to run report
	 *
	 */
	public function indexAction() {
		$this->view->mbrSelect = Application_Model_Customer::getQuerySelect();
		$this->view->catSelect = Application_Model_Category::getQuerySelect();
		$this->view->srvcSelect = Application_Model_Service::getQuerySelect();
		$this->view->saveSelect = Application_Model_Query::getQuerySelect('report');
		$this->view->ovlSelect = Application_Model_Overlay::getQuerySelect();
		$services = new Application_Model_Service();
		$this->view->attSrvcSelect = $services->getForSelect('desc');
		$this->view->attSrvcSelect = array(0=>'Please select a service&nbsp;') + $this->view->attSrvcSelect;
		$enrollments = new Application_Model_Enrolled();
		$this->view->enrSrvcSelect = $this->view->attSrvcSelect;

	}

	/**
     * Run report
     *
     * @throws Application_Model_Exception_InvalidHttpRequest
     */
    public function runAction() {
        $request = $this->getRequest();
        if (!$request->isPost()) {
            throw new Application_Model_Exception_InvalidHttpRequest();
        }
        $cxt = $this->_helper->getHelper('contextSwitch');
        if (!in_array($cxt->getCurrentContext(), array('xml', 'word', 'excel'))) {
            throw new Application_Model_Exception_InvalidHttpRequest();
        }
        $rpt = $request->getParam('rpt');
        if ($rpt == null) {
            throw new Application_Model_Exception_InvalidParams('Invalid report specified');
        }
        $selHandler = '_createSelect' . ucfirst($rpt);
        $rows = $this->$selHandler();
        $sess = new Zend_Session_Namespace(self::SESS_REPORT);
        //output the report
        if (count($rows) == 0) {
            $this->view->hasreport = false;
            $this->view->data = null;
            //blank the session store
            $sess->store = null;
            $sess->store2 = null;
            $sess->criteria = null;
            $sess->rptType = null;
        } else {
            //save the query to session in case user wants to save it
            $sess->store = $this->_selectStore;
            $sess->store2 = $this->_selectStore2;
            $sess->criteria = $this->_criteria;
            $sess->rptType = $rpt;

			$this->view->data = $rows;
			$this->view->hasreport = true;
		}
		
		$this->view->rptType = $rpt;
		$this->view->where = $this->_criteria;
		$user = ZF4_User::getSessionIdentity();
		$this->view->user = $user['uName'];
		$org = new Application_Model_Org(intval($user['orgId']));
		$this->view->org = $org->name;
		$this->view->date = ZF4_Date::now()->get(Zend_Date::DATE_MEDIUM);
		$this->view->title = $this->_titles[$rpt];
		$img = (isset($org->logoFile) ? $org->logoFile : ZF4_View_Helper_Branding::IMG_LOGO);
        $this->view->logo = 'brand/' . $org->tag . '/' . $img ;
		
	}
	
	/**
	 * Save the current report query for user and return the query id
	 * JSON only
	 */
	public function saveAction() {
		$cxt = $this->_helper->getHelper('contextSwitch');
		if ($cxt->getCurrentContext() != 'json') {
			throw new Application_Model_Exception_InvalidHttpRequest();
		}
		$sess = new Zend_Session_Namespace(self::SESS_REPORT );
		$data = new ZF4_Json_Message();
		if ($sess->rptType == null) {
			$data->success = false;
			$data->msg = 'No current query to save';
		} else {
			$user = ZF4_User::getSessionIdentity();
			$query = new Application_Model_Query();
			$request = $this->getRequest();
			try {
				$t1=$sess->store;
				if ($t1 instanceof ZF4_Db_Table_Select ) {
					$t1->getAdapter()->getProfiler()->clear();
				}
				$t2=$sess->store2;
				if ($t2 instanceof ZF4_Db_Table_Select ) {
					$t2->getAdapter()->getProfiler()->clear();
				}
				$sql = array('main'=>$t1,'sub'=>$t2);
				$extra = array('criteria'=>$sess->criteria,'rptType'=>$sess->rptType);
				$id = $query->insert(
					array(
						'uid' => intval($user['id']),
						'name' => $request->getParam('name'),
						'desc' => $request->getParam('desc'),
						'sql' => base64_encode(serialize($sql)),
						'tag' => 'report',
						'extra' => base64_encode(serialize($extra))
					)
				);
				if ($id != 0) {
					$data->data = array('id'=>$id,'name'=>$request->getParam('name'));
				} else {
					$data->success = false;
					$data->msg = 'Unable to save query - please see administrator';
				}
			} catch(Exception $e) {
				$data->msg = 'Error: ' . $e->getMessage();
				$data->success = false;
			}
		}
		$this->_helper->json->sendJSON($data);
	}
	
	/**
	 * Run a saved report
	 *
	 */
	public function runsavedAction() {
		$request = $this->getRequest();
		if (!$request->isPost()) {
			throw new Application_Model_Exception_InvalidHttpRequest();
		}
		$cxt = $this->_helper->getHelper('contextSwitch');
		if (!in_array($cxt->getCurrentContext(),array('xml','word','excel'))) {
			throw new Application_Model_Exception_InvalidHttpRequest();
		}
		$id = intval($request->getparam('id'));
		if ($id == 0) {
			throw new Application_Model_Exception_InvalidParams('Invalid report specified');
		}
		//retrieve the report details
		$query = new Application_Model_Query($id);
		$sql = unserialize(base64_decode($query->sql));
		$extra = unserialize(base64_decode($query->extra));
		$rpt = $extra['rptType'];
		$this->_criteria = $extra['criteria'];
		$this->_selectStore = $sql['main'];
		$this->_selectStore2 = $sql['sub'];
		
		//Get report data
		$this->_runSaved = true;
		$selHandler = '_createSelect' . ucfirst($rpt);
		$rows = $this->$selHandler();
		
		//save report dets and view report
		$sess = new Zend_Session_Namespace(self::SESS_REPORT);
		if (count($rows) == 0) {
			$this->view->hasreport = false;
			$this->view->data = null;
			//blank the session store
			$sess->store = null;
			$sess->store2 = null;
			$sess->criteria = null;
			$sess->rptType = null;
		} else {
			//save the query to session in case user wants to save it
			$sess->store = $this->_selectStore;
			$sess->store2 = $this->_selectStore2;
			$sess->criteria = $this->_criteria;
			$sess->rptType = $rpt;	
					
			$this->view->data = $rows;
			$this->view->hasreport = true;		
		}
		$this->view->rptType = $rpt;
		$this->view->where = $this->_criteria;
		$user = ZF4_User::getSessionIdentity();
		$this->view->user = $user['uName'];
		$org = new Application_Model_Org(intval($user['orgId']));
		$this->view->org = $org->name;
		$this->view->date = ZF4_Date::now()->get(Zend_Date::DATE_MEDIUM);
		$this->view->title = $this->_titles[$rpt];
		$img = (isset($org->logoFile) ? $org->logoFile : ZF4_View_Helper_Branding::IMG_LOGO);
        $this->view->logo = '/images/brand/' . $org->tag . '/' . $img ;
		
	}
	
	/**
	 * Return a selector
	 * JSON
	 * 
	 * GET Parameters:
	 * 	sel	string what to select  [srvcdate]
	 * 	srvc int service id [required for sel==srvcdate]
	 *
	 */
	public function selAction() {
		$request = $this->getRequest();
		$type = $request->getParam('sel',null);
		switch ($type) {
			case 'srvcdate': //get dates that service ran on
				$opts = new Application_Model_Usage();
				$user = ZF4_User::getSessionIdentity();
				$select = $opts->select()
						->from($opts,array('uDate'))
						->where('orgId=?',intval($user['orgId']))
						->where('srvcId=?',intval($request->getParam('srvc')))
						->order('uDate')
						->distinct();
				$rows = $opts->fetchAll($select);
				$options = array();
				foreach ($rows as $row) {
					$options[$row->uDate] = ZF4_Date::date($row->uDate)->get(Zend_Date::DATE_MEDIUM );
				}
				break;
			default :
				throw new Application_Model_Exception_InvalidParams();
				break;
		}
		$response = new ZF4_Json_Message();
		$response->data = $options;
		$this->_helper->json->sendJSON($response);		
	}
	
	/**
	 * Run test reports
	 *
	 */
	public function testAction() {
	}
		
/*
            $this->view->data = $rows;
            $this->view->hasreport = true;
        }
        $this->view->rptType = $rpt;
        $this->view->where = $this->_criteria;
        $this->view->date = ZF4_Date::now()->get(Zend_Date::DATE_MEDIUM);
        $this->view->title = $this->_titles[$rpt];
        $this->view->logo = 'brand/' . $this->view->org('tag') . '/'
                . ZF4_View_Helper_Branding::IMG_LOGO;
*/

    /**
     * Create member report data
     *
     * @return array
     */
    protected function _createSelectMbr() {
        $p = $_POST;
        $members = new Application_Model_Customer();
        if ($this->_runSaved) {
            $select = $this->_selectStore;
        } else {
            //gather the parameters for the query
            $request = $this->getRequest();
            $mbrGenders = $request->getParam('gender');
            $mbrAges = $request->getParam('age');
            $mbrPcodes = $request->getParam('pcode');
            $mbrEthnicities = $request->getparam('ethnicity');
            $mbrLangs = $request->getParam('lang');
            $mbrPupil = $request->getParam('pupil');
            $srvcs = $request->getParam('srvc');
            $cats = $request->getParam('cat');
            $user = ZF4_User::getSessionIdentity();
            $this->_criteria = array();
            //massage the parameters cus if they are coming from the
            //excel or word POST Then they are not the same as the Html POST
            if (!is_array($mbrAges))
                $mbrAges = explode(',', $mbrAges);
            if (!is_array($mbrGenders))
                $mbrGenders = explode(',', $mbrGenders);
            if (!is_array($mbrPcodes))
                $mbrPcodes = explode(',', $mbrPcodes);
            if (!is_array($mbrEthnicities))
                $mbrEthnicities = explode(',', $mbrEthnicities);
            if (!is_array($mbrLangs))
                $mbrLangs = explode(',', $mbrLangs);
            if (!is_array($mbrPupil))
                $mbrPupil = explode(',', $mbrPupil);
            if (!is_array($cats))
                $cats = explode(',', $cats);
            if (!is_array($srvcs))
                $srvcs = explode(',', $srvcs);

            //create the query - member & map coords selection
            //initial select - get all points
            $select = $members->select()
                            ->setIntegrityCheck(false)
                            ->from(array('p' => 'person'), array('uid', 'style', 'fName', 'lName', 'geoId', 'dob', 'gender', 'age', 'ethnicity', 'lang', 'pType', 'mTel', 'oTel', 'email', 'surgery'))
                            ->where('p.orgId=?', intval($user['orgId']))
                            ->join(array('g' => 'geoData'), 'p.geoId=g.id', array('lat', 'lng', 'hNum', 'pCode'))
                            ->where("g.sts='found'");
            if ($mbrAges[0] != '0') {
                //we have age groups
                $collect = '';
                $collect2 = '';
                $ageRanges = Application_Model_Person::getAgeSelector();
                foreach ($mbrAges as $value) {
                    $collect .= "'{$value}',";
                    $collect2 .= $ageRanges[$value] . ', ';
                }
                $collect = trim($collect, ',');
                $collect2 = trim($collect2, ', ');
                if ($collect != '') {
                    $select->where(new Zend_Db_Expr("p.ageRange in ({$collect})"));
                    $this->_criteria[] = "Age range in ({$collect2})";
                }
            }
            if ($mbrGenders[0] != 'all') {
                //we have gender selections
                $collect = '';
                foreach ($mbrGenders as $value) {
                    $collect .= "'{$value}',";
                }
                $collect = trim($collect, ',');
                if ($collect != '') {
                    $select->where(new Zend_Db_Expr("p.gender in ({$collect})"));
                    $this->_criteria[] = "Gender in ({$collect})";
                }
            }
            if ($mbrPcodes[0] != 'all') {
                //we have post code selections
                $collect = '';
                foreach ($mbrPcodes as $value) {
                    $collect .= "'{$value}',";
                }
                $collect = trim($collect, ',');
                if ($collect != '') {
                    $select->where(new Zend_Db_Expr("left(g.pCode,locate(' ',g.pCode)-1) in ({$collect})"));
                    $this->_criteria[] = "Post codes in ({$collect})";
                }
            }
            if ($mbrEthnicities[0] != 'all') {
                //we have ethnicity selections
                $collect = '';
                foreach ($mbrEthnicities as $value) {
                    $collect .= "'{$value}',";
                }
                $collect = trim($collect, ',');
                if ($collect != '') {
                    $select->where(new Zend_Db_Expr("p.ethnicity in ({$collect})"));
                    $this->_criteria[] = "Ethnicity in ({$collect})";
                }
            }
            if ($mbrLangs[0] != '0') {
                //we have mother tongue selections
                $collect = '';
                foreach ($mbrLangs as $value) {
                    $collect .= "'{$value}',";
                }
                $collect = trim($collect, ',');
                if ($collect != '') {
                    $select->where(new Zend_Db_Expr("p.lang in ({$collect})"));
                    $this->_criteria[] = "Languages in ({$collect})";
                }
            }
            //pupil checkbox should only be yes or no. interface allows user to select, all || yes && no
            //so if yes & no selected it = all
            if ($mbrPupil[0] != '0' && count($mbrPupil) == 1) {
                $select->where(new Zend_Db_Expr("p.pType like '%{$mbrPupil[0]}%'"));
                $this->_criteria[] = "Member type is {$mbrPupil[0]}";
            } else {
                //limit selection to member types only
                $mask = $members->getValidMask();
                $select->where("bin(p.pType+0 & {$mask})");
            }

            //add any categories
            if ($cats[0] != '0') {
                //we have some categories
                $catmodel = new Application_Model_Category();
                $categories = $catmodel->getForSelect('name');
                $collect = '';
                $collect2 = '';
                foreach ($cats as $value) {
                    $collect .= "{$value},";
                    $collect2 .= $categories[$value] . ', ';
                }
                $collect = trim($collect, ',');
                $collect2 = trim($collect2, ' ,');
                if ($collect != '') {
                    $select->join(array('pc' => 'person_cat'), 'pc.prsnId=p.id', array())
                            ->where(new Zend_Db_Expr("pc.catId in ({$collect})"));
                    $this->_criteria[] = "Categories in ({$collect2})";
                }
            }

            //add any services
            if ($srvcs[0] != '0') {
                //we have some categories
                $srvcModel = new Application_Model_Service();
                $services = $srvcModel->getForSelect('name');
                $collect = '';
                $collect2 = '';
                foreach ($srvcs as $value) {
                    $collect .= "{$value},";
                    $collect2 .= $services[$value] . ', ';
                }
                $collect = trim($collect, ',');
                $collect2 = trim($collect2, ' ,');
                if ($collect != '') {
                    $select->join(array('u' => 'usage'), 'u.prsnId=p.id', array())
                            ->where(new Zend_Db_Expr("u.srvcId in ({$collect})"));
                    $this->_criteria[] = "Services in ({$collect2})";
                }
            }
            //temp store the select
            $this->_selectStore = $select;
        } //end if !runs saved
        //$sql= (string) $select;
        $rows = $members->fetchAll($select);

        //$retArr = $this->_massageData($rows);
        return $rows;
    }

    /**
     * Create overlay report data
     *
     * @return array
     */
    protected function _createSelectOvl() {
        $ovlModel = new Application_Model_Overlay();
        if ($this->_runSaved) {
            //retrieve overlay select
            $select = $this->_selectStore2;
            $rows = $this->_createSelectMbr();
            if (count($rows) > 0) {
                $overlays = $ovlModel->fetchAll($select);
            }
        } else {
            $rows = $this->_createSelectMbr();
            if (count($rows) > 0) {
                $request = $this->getRequest();
                //for each member, we now check if they are in or out of the selected overlays
                $ovls = $request->getParam('ovl');
                if (!is_array($ovls))
                    $ovls = explode(',', $ovls);

                $user = ZF4_User::getSessionIdentity();
                $select = $ovlModel->select()
                                ->from('overlay', array('id', 'name', 'coords'))
                                ->where('orgId=?', intval($user['orgId']));
                $ovlModel = new Application_Model_Overlay();
                $tmp = $ovlModel->getStdOverlays();
                //reindex by overlay id
                $overlays = array();
                foreach ($tmp as $tmp2) {
                	$overlays[$tmp2['id']] = $tmp2;
                }
                if ($ovls[0] != 'ALL') {
                    //we have chosen some overlays
                    $collect = '';
                    $collect2 = '';
                    foreach ($ovls as $value) {
                        $collect .= "'{$value}',";
                        $collect2 .= $overlays[$value]['name'] . ', ';
                    }
                    $collect = trim($collect, ',');
                    $collect2 = trim($collect2, ' ,');
                    if ($collect != '') {
                        $select->where(new Zend_Db_Expr("id in ({$collect})"));
                        $this->_criteria[] = "Overlays in ({$collect2})";
                    }
                } else {
                    //all overlays
                    /*
                    $collect = '';
                    foreach ($overlays as $value) {
                        $collect .= "'{$value['tag']}',";
                    }
                    $collect = trim($collect, ',');
                    if ($collect != '') {
                        $select->where(new Zend_Db_Expr("tag in ({$collect})"));
                    }
                    */
                    $this->_criteria[] = 'ALL Overlays';
                }

                $overlays = $ovlModel->fetchAll($select);
                //temp store the select
                $this->_selectStore2 = $select;
            }
        }
        if (count($rows) > 0) {
            //then we have data so process overlays
            //construct the polygons
            $polygons = array();
            foreach ($overlays as $overlay) {
                $ovl = unserialize($overlay['coords']);
                $polygons[$overlay['name']] = array();
                foreach ($ovl as $o) {
                	if (isset($o['points'])) $o = $o['points'];
                    $polygons[$overlay['name']][] = new ZF4_Polygon_Mercator_WGS84($o);
                }
            }
            //convert data to array
            $rows = $rows->toArray();
            //set up each record with not found flag
            foreach ($rows as &$row) {
                $row['overlays'] = array();
                foreach ($overlays as $overlay) {
                    $row['overlays'][$overlay['name']] = false;
                }
            }
            //test for each point in all polygons
            foreach ($rows as &$row) {
                foreach ($polygons as $name => $polyholder) {
                    foreach ($polyholder as $polygon) {
                        if ($polygon->pointInside(array((double) $row['lat'], (double) $row['lng']))) {
                            $row['overlays'][$name] = true;
                        }
                    }
                }
            }
        }
        $a = $request->getParams();
        $this->view->fltExclude = (boolean) $request->getParam('fltExclude',0);
        return $rows;
    }

    /**
     * Create Service Usage report data
     *
     * @return array
     */
    protected function _createSelectUsg() {
        $usage = new Application_Model_Usage();
        if ($this->_runSaved) {
            $baseSelect = $this->_selectStore;
            $intervalArr = $this->_selectStore2;
        } else {
            //gather parameters
            $request = $this->getRequest();
            $startDt = $request->getParam('startDt');
            $endDt = $request->getParam('endDt');
            $splitBy = $request->getParam('splitDt');
            $srvcs = $request->getParam('srvc');
            if (!is_array($srvcs))
                $srvcs = explode(',', $srvcs);
            $user = ZF4_User::getSessionIdentity();
            $orgId = intval($user['orgId']);
            $numIntervals = 0; //number of intervals in data set
            $this->_criteria[] = 'By ' . ucfirst($splitBy);
            //check dates
            if (null == $startDt) {
                //get min date in system
                $row = $usage->fetchRow(
                                        $usage->select()
                                        ->from('usage', array('minDate' => new Zend_Db_Expr('min(uDate)')))
                                        ->where('orgId=?', $orgId)
                );
                $startDt = new Zend_Date($row->minDate);
            } else {
                $startDt = new Zend_Date($startDt);
            }
            if (null == $endDt) {
                //get max date in system
                $row = $usage->fetchRow(
                                        $usage->select()
                                        ->from('usage', array('maxDate' => new Zend_Db_Expr('max(uDate)')))
                                        ->where('orgId=?', $orgId)
                );
                $endDt = new Zend_Date($row->maxDate);
            } else {
                $endDt = new Zend_Date($endDt);
            }
            //massage dates depending on how user wants them split
            switch ($splitBy) {
                case 'week':
                    $dow = $startDt->get(Zend_Date::WEEKDAY_8601);
                    if ($dow != 1) {
                        //move date to beginning of week
                        $startDt->sub($dow - 1, Zend_Date::DAY);
                    }
                    $dow = $endDt->get(Zend_Date::WEEKDAY_8601);
                    if ($dow != 7) {
                        //move date to end of week
                        $endDt->add(7 - $dow, Zend_Date::DAY);
                    }
                    //work out week interval
                    //$d1 = new DateTime($startDt->get(Zend_Date::DATE_FULL ));
                    //$d2 = new DateTime($endDt->get(Zend_Date::DATE_FULL ));
                    //$numIntervals = intval($d1->diff($d2)->format('%a'));
                    //$numIntervals = intval(floor($numIntervals/7));
                    $numIntervals = ZF4_Date::diff($startDt, $endDt, 'week');
                    break;

                case 'month':
                case 'quarter':
                case 'year':
                    $dom = $startDt->get(Zend_Date::DAY_SHORT);
                    if ($dom != 1) {
                        //move date to beginning of month
                        $startDt->sub($dom - 1, Zend_Date::DAY);
                    }
                    $dom = $endDt->get(Zend_Date::DAY_SHORT);
                    $numdays = $endDt->get(Zend_Date::MONTH_DAYS);
                    if ($dom != $numdays) {
                        //move date to end of month
                        $endDt->add($numdays - $dom, Zend_Date::DAY);
                    }
                    //work out month interval
                    //$d1 = new DateTime($startDt->get(Zend_Date::DATE_FULL ));
                    //$d2 = new DateTime($endDt->get(Zend_Date::DATE_FULL ));
                    //$numIntervals = intval($d1->diff($d2)->format('%m'));
                    $numIntervals = ZF4_Date::diff($startDt, $endDt, 'month');
                    break;

                case 'day':
                    //$d1 = new DateTime($startDt->get(Zend_Date::DATE_FULL ));
                    //$d2 = new DateTime($endDt->get(Zend_Date::DATE_FULL ));
                    //$numIntervals = intval($d1->diff($d2)->format('%a'));
                    $numIntervals = ZF4_Date::diff($startDt, $endDt, 'day');
                default:
                    break;
            }
            //additional massaging for 1/4s and year
            switch ($splitBy) {
                case 'quarter':
                    //ensure that there is at least a quarter split
                    //between dates
                    $stMon = $startDt->get(Zend_Date::MONTH_SHORT);
                    $enMon = $endDt->get(Zend_Date::MONTH_SHORT);
                    $diff = ($enMon - $stMon) % 3;
                    if ($diff != 0) {
                        $endDt->add(3 - $diff, Zend_Date::MONTH);
                    }
                    //work out quarter intervals
                    //$d1 = new DateTime($startDt->get(Zend_Date::DATE_FULL ));
                    //$d2 = new DateTime($endDt->get(Zend_Date::DATE_FULL ));
                    //$numIntervals = intval($d1->diff($d2)->format('%m'));
                    $numIntervals = intval(floor($numIntervals / 3));
                    break;

                case 'year':
                    //ensure that there is at least one year between start and end
                    $stYr = $startDt->get(Zend_Date::YEAR);
                    $enYr = $endDt->get(Zend_Date::YEAR);
                    $diff = intval($enYr - $stYr);
                    $endDt = clone $startDt;
                    $endDt->add(1 + $diff, Zend_Date::YEAR);
                    //work out year intervals
                    //$d1 = new DateTime($startDt->get(Zend_Date::DATE_FULL ));
                    //$d2 = new DateTime($endDt->get(Zend_Date::DATE_FULL ));
                    //$numIntervals = intval($d1->diff($d2)->format('%y'));
                    $numIntervals = ZF4_Date::diff($startDt, $endDt, 'year');
                    break;

                default:
                    break;
            }

            // Now create the intervals that we'll be working with
            $intervalArr = array();
            $intStart = $startDt;
            $numIntervals++;
            for ($interval = 1; $interval < $numIntervals; $interval++) {
                $intervalArr[$interval] = array(
                    'start' => ZF4_Date::getBeginDay($intStart),
                    'end' => null,
                    'name' => ''
                );
                switch ($splitBy) {
                    case 'day':
                        $intervalArr[$interval]['name'] = $intStart->get(Zend_Date::DATE_MEDIUM);
                        $intervalArr[$interval]['end'] = ZF4_Date::getEndDay($intStart);
                        $intStart->add(1, Zend_Date::DAY);
                        break;

                    case 'week':
                        $intervalArr[$interval]['name'] = 'w/b ' . $intStart->get(Zend_Date::DATE_MEDIUM);
                        $intStart->add(1, Zend_Date::WEEK);
                        $intervalArr[$interval]['end'] = ZF4_Date::getEndDay($intStart);
                        break;

                    case 'month':
                        $intervalArr[$interval]['name'] = $intStart->get(Zend_Date::MONTH_NAME_SHORT) . ' ' . $intStart->get(Zend_Date::YEAR);
                        $intStart->add(1, Zend_Date::MONTH);
                        $intervalArr[$interval]['end'] = ZF4_Date::getBeginDay($intStart);
                        break;

                    case 'quarter':
                        $qs = clone $intStart;
                        $intStart->add(3, Zend_Date::MONTH);
                        $qe = clone $intStart;
                        $qe->sub(1, Zend_Date::DAY);
                        $intervalArr[$interval]['end'] = ZF4_Date::getBeginDay($intStart);
                        $intervalArr[$interval]['name'] =
                                'Q' . $interval . ' ' .
                                $qs->get(Zend_Date::MONTH_NAME_SHORT) . ' ' . $qs->get(Zend_Date::YEAR) .
                                ' - ' .
                                $qe->get(Zend_Date::MONTH_NAME_SHORT) . ' ' . $qe->get(Zend_Date::YEAR);
                        break;

                    case 'year':
                        $ys = clone $intStart;
                        $intStart->add(1, Zend_Date::YEAR);
                        $ye = clone $intStart;
                        $ye->sub(1, Zend_Date::DAY);
                        $intervalArr[$interval]['end'] = ZF4_Date::getBeginDay($intStart);
                        $intervalArr[$interval]['name'] =
                                'Y' . $interval . ' ' .
                                $ys->get(Zend_Date::MONTH_NAME_SHORT) . ' ' . $ys->get(Zend_Date::YEAR) .
                                ' - ' .
                                $ye->get(Zend_Date::MONTH_NAME_SHORT) . ' ' . $ye->get(Zend_Date::YEAR);
                        break;

                    default:
                        break;
                }
                $intervalArr[$interval]['start'] = $intervalArr[$interval]['start']->get(Zend_Date::ISO_8601);
                $intervalArr[$interval]['end'] = $intervalArr[$interval]['end']->get(Zend_Date::ISO_8601);
            }
            //$start = (string) $startDt;
            //$end = (string) $endDt;

            $members = new Application_Model_Customer();
            $mask = $members->getValidMask();
            //initial select - get all data points for members
            $baseSelect = $members->select()
                            ->setIntegrityCheck(false)
                            ->from(array('p' => 'person'), array())
                            ->join(array('u' => 'usage'), 'u.prsnId=p.id', array('count' => new Zend_Db_Expr('count(*)')))
                            ->join(array('s' => 'service'), 's.id=u.srvcId', array('name'))
                            ->where('p.orgId=?', $orgId)
                            ->where('u.orgId=?', $orgId)
                            ->where('s.orgId=?', $orgId)
                            ->where("bin(p.pType+0 & {$mask})")
                            ->group('s.name');

            //add any services
            if ($srvcs[0] != '0') {
                //we have some services
                $srvcModel = new Application_Model_Service();
                $services = $srvcModel->getForSelect('name');
                $collect = '';
                $collect2 = '';
                foreach ($srvcs as $value) {
                    $collect .= "{$value},";
                    $collect2 .= $services[$value] . ', ';
                }
                $collect = trim($collect, ',');
                $collect2 = trim($collect2, ' ,');
                if ($collect != '') {
                    $baseSelect->where(new Zend_Db_Expr("u.srvcId in ({$collect})"));
                    $this->_criteria[] = "Services in ({$collect2})";
                }
            } else {
                $this->_criteria[] = 'ALL Services';
            }

            //save the basic select and intervals to storage
            $this->_selectStore = $baseSelect;
            $this->_selectStore2 = $intervalArr;
        } //end if !run saved
        //Finally we can collect some data!!
        $retArr = array();
        foreach ($intervalArr as $key => $interval) {
            $select = clone $baseSelect;
            $select->where(new Zend_Db_Expr("uDate between '{$interval['start']}' and '{$interval['end']}'"));
            $rows = $usage->fetchAll($select);
            foreach ($rows as $row) {
                if (!isset($retArr[$row->name])) {
                    $retArr[$row->name] = array();
                }
                //we prefix the interval name with its position so that they will be ordered in the array
                $retArr[$row->name]["{$key}|{$interval['name']}"] = intval($row->count);
            }
        }
        //add in missing counts
        $allCounts = array();
        foreach ($retArr as $data) {
            $allCounts = array_merge($allCounts, $data);
        }
        foreach ($retArr as $service => &$data) {
            foreach ($allCounts as $key => $bin) {
                if (!key_exists($key, $data)) {
                    $data[$key] = 0;
                }
            }
        }

        return $retArr;
    }

    /**
     * Create Service Attendance Register data
     *
     * @return array
     */
    protected function _createSelectAtt() {
        $members = new Application_Model_Customer();
        if ($this->_runSaved) {
            $select = $this->_selectStore;
            $date = $this->_selectStore2;
        } else {
            //gather the parameters for the query
            $request = $this->getRequest();
            $srvc = intval($request->getParam('attSrvc'));
            $date = $request->getParam('attDate');
            if (!is_array($date))
                $date = explode(',', $date);
            $this->_selectStore2 = $date;
            $user = ZF4_User::getSessionIdentity();
            $this->_criteria = array();
            $srvcModel = new Application_Model_Service($srvc);

            $this->_criteria[] = 'Service: ' . (isset($srvcModel->name) ? $srvcModel->name : 'No Service Selected');
            $select = $members->select()
                            ->setIntegrityCheck(false)
                            ->from(array('p' => 'person'), array('uid', 'style', 'fName', 'lName'))
                            ->join(array('u' => 'usage'), 'p.id=u.prsnId', array())
                            ->where('u.srvcId=?', intval($srvc));
            $this->_selectStore = $select;
        } //end if !runs saved
        //foreach date requested, get the data
        $retArr = array();
        $keyArr = array();
        foreach ($date as $day) {
            $sel = clone $select;
            $sel->where('u.uDate=?', $day);
            $retArr[$day] = $members->fetchAll($sel)->toArray();

            //collect the keys
            foreach ($retArr[$day] as $row) {
                $keyArr[$row['uid']] = 1;
            }
        }
        ksort($keyArr);
        $retArr['keys'] = $keyArr;

        return $retArr;
    }

	/**
	 * Create Service Attendance Statistics data
	 *
	 * @return array
	 */
	protected function _createSelectEnr() {
		$usage = new Application_Model_Usage();
		if ($this->_runSaved) {
			$select = $this->_selectStore;
			$select2 = $this->_selectStore2;		
		} else {
			//gather the parameters for the query
			$request = $this->getRequest();
			$srvc = intval($request->getParam('enrSrvc'));

			$user = ZF4_User::getSessionIdentity();
			$this->_criteria = array();
			$srvcModel = new Application_Model_Service($srvc);
			
			$this->_criteria[] = 'Service: ' . (isset($srvcModel->name) ? $srvcModel->name : 'No Service Selected');
			$select = $usage->select()
					->setIntegrityCheck(false)
					->from(array('u'=>'usage'),array('count'=>new Zend_Db_Expr("count(*)")))
					->join(array('p'=>'person'),'u.prsnId=p.id',array('uid','style','fName','lName'))
					->where('u.srvcId=?',intval($srvc))
					->group('p.uid');
			$this->_selectStore = $select;
			$select2 = "select count(*) as `count` from (SELECT distinct uDate FROM `usage` WHERE srvcId={$srvc}) as u";
			$this->_selectStore2 = $select2;
		} //end if !runs saved
		
		//Get the total possible sessions
		$db = Zend_Db_Table_Abstract::getDefaultAdapter();
		$tot = intval($db->fetchOne($select2));
		$p = 100/$tot;
		//get attendance stats per row
		//NB - summary stats are generated in the report template
		$retArr = array();
		$rows = $usage->fetchAll($select);
		foreach ($rows as $row) {
			$data = $row->toArray();
			$data['tot'] = $tot; //every row has the total possible attendance figure
			$data['percent'] = $p * $data['count'];
			$retArr[] = $data;
		}
		
		return $retArr;
		
	}
    
	/**
	 * Creates data for member card details
	 *
	 */
	protected function _createSelectCard() {
		if ($this->_runSaved) {
			$select = $this->_selectStore;
			$select2 = $this->_selectStore2;		
		} else {
			$user = ZF4_User::getSessionIdentity();
            $orgId = intval($user['orgId']);
			$this->_selectStore2 = null;
			//get member details
			$members = new Application_Model_Customer();	
            $mask = $members->getValidMask();
            //initial select - get all data points for members
            $this->_selectStore = $members->select()
                            ->setIntegrityCheck(false)
                            ->from('person',array('uid','style','fName','mName','lName','pType','pin','jDate'))
                            ->where('orgId=?', $orgId)
                            ->where("bin(pType+0 & {$mask})")
                            ->order('uid');

		} //end if !runs saved
		$this->_criteria = array(); //no criteria
		
		//Get the data
		$db = Zend_Db_Table_Abstract::getDefaultAdapter();
		$rows = $db->fetchAll($this->_selectStore);
		return $rows;
	}
	
     /**
     * generate demo system usage data
     *
     */
    protected function _genDemoUsage() {
        //set up services
        $srvcmodel = new Application_Model_Service();
        $services = $srvcmodel->getForSelect('name');
        //get array of user ids that we can use
        $pmodel = new Application_Model_Customer();
        $persons = $pmodel->getForSelect('uid');
        $select = $pmodel->select()
                        ->from('person', array(
                            'min' => New Zend_Db_Expr('min(id)'),
                            'max' => New Zend_Db_Expr('max(id)')))
                        ->where("pType='member' or pType='member,pupil'")
                        ->where('orgId=?', 3);
        $row = $pmodel->fetchRow($select);
        $minId = intval($row->min);
        $maxId = intval($row->max);
        //set up dates for 20 days from today
        $dates = array();
        $thisDate = ZF4_Date::now();
        for ($i = 0; $i < 20; $i++) {
            $weekday = $thisDate->get(Zend_Date::WEEKDAY_8601);
            //we only want Monday to Fridays in the date
            while ($weekday == 6 || $weekday == 7) {
                $thisDate->add(1, Zend_Date::DAY);
                $weekday = $thisDate->get(Zend_Date::WEEKDAY_8601);
            }
            $dates[] = $thisDate->get(Zend_Date::ISO_8601);
            $thisDate->add(1, Zend_Date::DAY);
        }
        //For each service add between 5 and 20 random persons for the service on each date
        $usgModel = new Application_Model_Usage();
        foreach ($services as $srvcId => $name) {
            foreach ($dates as $date) {
                $numUses = rand(5, 20);
                for ($c = 0; $c < $numUses; $c++) {
                    //choose a random user
                    $uIdx = 0;
                    while (!array_key_exists($uIdx, $persons)) {
                        $uIdx = rand($minId, $maxId);
                    }
                    $usgModel->insert(array(
                        'prsnId' => $uIdx,
                        'srvcId' => $srvcId,
                        'uDate' => $date
                    ));
                }
            }
        }
    }

    protected function _genDemoRelations() {
        //lets relate some members
        $sql = "select a.* from (SELECT group_concat(cast(id as char)) as 'related',group_concat(pType SEPARATOR '|') as ptype, group_concat(cast(age as char)) as age,`geoId`,count(*) as c FROM `person` as b where b.orgId=3 group by `geoId`) as a where a.c>1 and a.c < 5";
        $db = Zend_Db_Table_Abstract::getDefaultAdapter();
        $relations = $db->fetchAll($sql);
        $relParent = new Application_Model_Reltype('Parent to');
        $relGParent = new Application_Model_Reltype('Grandparent to');
        $relCarer = new Application_Model_Reltype('Live in carer for');
        $relDoctor = new Application_Model_Reltype('Doctor to');
        $relTeacher = new Application_Model_Reltype('Key Worker to');

        $relHandler = new Application_Model_Relation();
        foreach ($relations as $row) {
            $rels = explode(',', $row['related']);
            $relA = intval($rels[0]);
            $relB = intval($rels[1]);
            $pTypes = explode('|', $row['ptype']);
            $tpA = $pTypes[0];
            $tpB = $pTypes[1];
            $ages = explode(',', $row['age']);
            $ageA = intval($ages[0]);
            $ageB = intval($ages[1]);
            if ($ageB > $ageA) {
                //swap
                $t = $ageA;
                $ageA = $ageB;
                $ageB = $t;
                $t = $relA;
                $relA = $relB;
                $relB = $t;
                $t = $tpA;
                $tpA = $tpB;
                $tpB = $t;
            }
            if (($ageA - $ageB) < 40 && ($ageA - $ageB) > 16) {
                //create a parent if age diff < 40
                $relHandler->insert(array(
                    'prsnIdA' => $relA,
                    'prsnIdB' => $relB,
                    'relTypeId' => $relParent->id
                ));
            } elseif (($ageA - $ageB) < 60 && ($ageA - $ageB) > 25) {
                //create a grandparent if age diff < 60
                $relHandler->insert(array(
                    'prsnIdA' => $relA,
                    'prsnIdB' => $relB,
                    'relTypeId' => $relGParent->id
                ));
            }
        }

        //relate some carers
        //get some children
        $sql = "select id from person where orgId=3 and pType='member,pupil' and ageRange='A'";
        $kids = $db->fetchAll($sql);
        $maxCaredFor = floor(count($kids) / 3);
        $kids = array_slice($kids, 0, $maxCaredFor); //just a third of them
        $pHandler = new Application_Model_Person();
        $select = $pHandler->select()->where('pType=?', 'carer')->where('orgId=?', 3);
        $carers = $pHandler->fetchAll($select);
        $maxCarer = count($carers);
        $thisCarer = 0;
        foreach ($kids as $child) {
            $carer = $carers[$thisCarer];
            $relHandler->insert(array(
                'prsnIdA' => $carer['id'],
                'prsnIdB' => $child['id'],
                'relTypeId' => $relCarer->id
            ));
            $thisCarer++;
            if ($thisCarer == $maxCarer)
                $thisCarer = 0;
        }

        //relate the doctors to members and staff
        $sql = "select id from person where orgId=3 and (pType='member,pupil' or pType='member' or pType='staff')";
        $people = $db->fetchAll($sql);
        $select = $pHandler->select()->where('pType=?', 'doctor')->where('orgId=?', 3);
        $carers = $pHandler->fetchAll($select);
        $maxCarer = count($carers);
        $thisCarer = 0;
        foreach ($people as $child) {
            $carer = $carers[$thisCarer];
            $relHandler->insert(array(
                'prsnIdA' => $carer['id'],
                'prsnIdB' => $child['id'],
                'relTypeId' => $relDoctor->id
            ));
            $thisCarer++;
            if ($thisCarer == $maxCarer)
                $thisCarer = 0;
        }

        //and assign every member a key worker
        $sql = "select id from person where orgId=3 and (pType='member,pupil' or pType='member')";
        $people = $db->fetchAll($sql);
        $select = $pHandler->select()->where('pType=?', 'staff')->where('orgId=?', 3);
        $carers = $pHandler->fetchAll($select);
        $maxCarer = count($carers);
        $thisCarer = 0;
        foreach ($people as $child) {
            $carer = $carers[$thisCarer];
            $relHandler->insert(array(
                'prsnIdA' => $carer['id'],
                'prsnIdB' => $child['id'],
                'relTypeId' => $relTeacher->id
            ));
            $thisCarer++;
            if ($thisCarer == $maxCarer)
                $thisCarer = 0;
        }
    }
}
