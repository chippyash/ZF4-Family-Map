<?php

/**
 * ZF4 Library
 *
 * @category 	ZF4
 * @package 	Trait
 * @subpackage 	Messenger
 * @author 	Ashley Kitson
 * @copyright   ZF4 Business Limited 2011, UK
 * @license     GNU AFFERO GENERAL PUBLIC LICENSE V3
 * 
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU Affero General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU Affero General Public License for more details.
 *
 *    You should have received a copy of the GNU Affero General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 *    License text is located in /docs/LICENSE.FAMILYMAP.txt
 */

/**
 * Trait that stores and retrieves messages for a client object
 *
 * usage:: $this->_registerTrait( new ZF4_Trait_Messenger(array('noLang'=>$this->_noLang)) );
 * 
 * @category 	ZF4
 * @package 	Trait
 * @subpackage 	Messenger
 */
class ZF4_Trait_Messenger extends ZF4_Trait_Abstract {

    /**
     * messages generated by object
     *
     * @var array
     */
    private $_messages = array();
    /**
     * Translator
     *
     * @var ZF4_Translator
     */
    private $_translator;
    /**
     * Do not use language translation
     * NB default is to use translation
     *
     * @var boolean
     */
    private $_noLang = false;

    /**
     * Trait initialisation
     * Overides abstract ancestor
     *
     * @throws ZF4_Messenger_Exception_NoTranslator
     */
    protected function _init() {
        if (!$this->_noLang) {
            try {
                $this->_translator = Zend_Registry::get(ZF4_Application_Resource_Language::REGKEY_TRANSLATE);
            } catch (Zend_Exception $e) {
                if (strpos($e->getMessage(), 'Zend_Translate') === false) {
                    //if a no translator error thrown, rethrow as an Object exception
                    throw new ZF4_Messenger_Exception_NoTranslator();
                }
            }
        }
    }

    /**
     * Support for trait construction
     * Set the NO LANGUAGE TRANSLATION flag
     *
     * @param boolean $flag
     */
    protected function _setNoLang($flag = false) {
        $this->_noLang = $flag;
    }

    /**
     * Proxy to translation service
     *
     * @param ZF4_Object $obj Model object that messenger is attached to
     * @param string $text
     * @return string
     */
    final public function _(ZF4_Object $obj, $text) {
        if (!is_null($this->_translator)) {
            return $this->_translator->_($text);
        } else {
            return $text;
        }
    }

    /**
     * Proxy to translation service - inline text translator
     *
     * @param ZF4_Object $obj Model object that messenger is attached to
     * @param string $text
     * @return string
     */
    final public function translateText(ZF4_Object $obj, $text) {
        if (!is_null($this->_translator)) {
            return $this->_translator->translateText($text);
        } else {
            return $text;
        }
    }

    /**
     * store a message
     * Translates into current language where possible
     *
     * @param ZF4_Object $obj Model object that messenger is attached to
     * @param array|string $msg array of message strings else a single string
     */
    final public function setMsg(ZF4_Object $obj, $msg) {
        if (!is_array($msg)) {
            $msg = array($msg);
        }
        $class = get_class($obj);
        if (!isset($this->_messages[$class]))
            $this->_messages[$class] = array();
        foreach ($msg as $m) {
            $this->_messages[$class][] = $this->_($obj, $m);
        }
    }

    /**
     * Clear the message array
     *
     * @param ZF4_Object $obj Model object that messenger is attached to
     */
    final public function clearMsg(ZF4_Object $obj) {
        $class = get_class($obj);
        $this->_messages[$class] = array();
    }

    /**
     * Retrieve object _messages array
     *
     * Clears all current messages when called.  Messages have already been translated if appropriate
     *
     * @param ZF4_Object $obj Model object that messenger is attached to
     * @return array Array of messages
     */
    final public function getMsg(ZF4_Object $obj) {
        $class = get_class($obj);
        if (isset($this->_messages[$class])) {
            $msg = $this->_messages[$class];
        } else {
            $msg = array();
        }
        $this->_messages[$class] = array();
        return $msg;
    }

    /**
     * Returns true if there are messages
     *
     * @param ZF4_Object $obj Model object that messenger is attached to
     * @return boolean
     */
    final public function isMsg(ZF4_Object $obj) {
        $class = get_class($obj);
        if (isset($this->_messages[$class])) {
            return (count($this->_messages[$class]) > 0);
        } else {
            return false;
        }
    }

}